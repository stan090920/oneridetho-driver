generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                  Int       @id @default(autoincrement())
  name                String
  photoUrl            String?
  email               String    @unique
  rating              Float?    @default(5)
  phone               String?   @unique
  provider            String 
  governmentIssuedId  String?
  verificationPhotoUrl String?
  verified            Boolean   @default(false)
  account             Account?
  bookings            Booking[]
  rides               Ride[]    @relation("UserRides")
  sessions            Session[] @relation("UserSessions")
  messages            Message[] @relation("UserMessages")
}

model Account {
  id       Int    @id @default(autoincrement())
  userId   Int    @unique
  email    String @unique
  password String
  user     User   @relation(fields: [userId], references: [id])
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  expiresAt    DateTime
  sessionToken String   @unique
  user         User     @relation("UserSessions", fields: [userId], references: [id])
}

model Booking {
  id         Int      @id @default(autoincrement())
  rideId     Int
  userId     Int
  driverId   Int?
  createdAt  DateTime @default(now())
  isAccepted Boolean?
  driver     Driver?  @relation(fields: [driverId], references: [id])
  ride       Ride     @relation(fields: [rideId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Driver {
  id              Int       @id @default(autoincrement())
  name            String
  photoUrl        String?
  carType         String
  licensePlate    String
  rating          Float?    @default(5)
  email           String    @unique
  password        String
  phone           String?   @unique
  carImageUrl     String?
  locationId      Int?      @unique
  numberOfRatings Int?      @default(0)
  isOnline        Boolean   @default(false)
  bookings        Booking[]
  Location        Location?
  rides           Ride[]    @relation("DriverRides")
  ratings         Rating[]
}

model Rating {
  id        Int     @id @default(autoincrement())
  value     Float
  comment   String?
  driverId  Int
  driver    Driver  @relation(fields: [driverId], references: [id])
}

model Ride {
  id                  Int        @id @default(autoincrement())
  pickupTime          DateTime
  dropoffTime         DateTime?
  fare                Float
  tip                 Float?     @default(5)
  userId              Int
  driverId            Int?
  status              RideStatus
  pickupLocation      Json
  dropoffLocation     Json
  passengerCount      Int        @default(1)
  isAccepted          Boolean?
  isConfirmed         Boolean
  paymentMethod       String
  isScheduled         Boolean    @default(false)
  scheduledPickupTime DateTime?
  extraCharges        Float?     @default(0)
  stopWaitTimes       Json?
  stops               Json?
  pickupDescription   String?
  bookings            Booking[]
  driver              Driver?    @relation("DriverRides", fields: [driverId], references: [id])
  user                User       @relation("UserRides", fields: [userId], references: [id])
  messages            Message[]  @relation("RideMessages")
}

model Location {
  id       Int     @id @default(autoincrement())
  lat      Json
  long     Json
  driverId Int?    @unique
  Driver   Driver? @relation(fields: [driverId], references: [id])
}

model Message {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())
  userId    Int
  rideId    Int
  user      User     @relation("UserMessages", fields: [userId], references: [id])
  ride      Ride     @relation("RideMessages", fields: [rideId], references: [id])
}

enum RideStatus {
  Requested
  InProgress
  Completed
  Cancelled
  Scheduled
}

model Admin {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
  name     String
}
